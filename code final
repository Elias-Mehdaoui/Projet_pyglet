import pyglet

window = pyglet.window.Window(720, 380, resizable = True)
pyglet.gl.glClearColor(1,0.40,0.3, 1)
batch = pyglet.graphics.Batch()
label = pyglet.text.Label('bravo, vous avez gagnÃ©',
                          font_name='Times New Roman',
                          font_size=36,
                          x=window.width//2, y=window.height//2,
                          anchor_x='center', anchor_y='center')

class Rectangle:
    
    def __init__(self, x_pos, y_pos, x, y, r, g, b):
        self.x = x
        self.y = y
        self.x_pos = x_pos
        self.y_pos = y_pos
        self.r = r
        self.g = g
        self.b = b
        self.rectangle = pyglet.shapes.Rectangle(x_pos, y_pos, x, y, color=(r, g, b), batch=batch)
        self.anchor_position = self.x/2, self.y/2  
    
    def click(self, x, y):
        if x >= self.x_pos and y >= self.y_pos and x <= self.x + self.x_pos and y <= self.y + self.y_pos:
                return True

    
    def click_aura(self, x, y):
        if x >= self.x_pos and y >= self.y_pos:
            if x <= self.x + self.x_pos and y <= 300:
                return True

    def new_pos(self, x2, y2):
        self.x_pos = x2
        self.y_pos = y2
        self.rectangle = Rectangle(self.x_pos, self.y_pos, self.x, self.y, self.r, self.g, self.b)


def rectangle_select(x,y):
    try :
                
        if pile2[-1].click(x, y):
            return pile2, base2
    except(IndexError, AttributeError):
        pass
    try:        
        if pile1[-1].click(x, y):
            return pile1, base1
    except(IndexError, AttributeError):
        pass
    try:                  
        if pile3[-1].click(x, y):
            return pile3, base3
    except(IndexError, AttributeError):
        pass


def base_select(x, y):
        if base1.click_aura(x, y):
            return base1, pile1
        elif base2.click_aura(x, y):
            return base2, pile2
        elif base3.click_aura(x, y):
            return base3, pile3
        else :
            return None, None 

            
def victoire(pile2, pile3):
    if len(pile2) == 5 or len(pile3) == 5 :
        return True
    else :
        return False 
    



barre1 = Rectangle(175, 0, 25, 300, 255, 255, 255)
base1 = Rectangle(35, 0, 300, 30, 255, 255, 255)

barre2 = Rectangle(700, 0, 25, 300, 255, 255, 255)
base2 = Rectangle(560, 0, 300, 30, 255, 255, 255)

barre3 = Rectangle(1225, 0, 25, 300, 255, 255, 255)
base3 = Rectangle(1085, 0, 300, 30, 255, 255, 255)


rectangle5 = Rectangle(50, 30, 275, 30, 93, 172, 255)
rectangle4 = Rectangle(75, 60, 225, 30, 51, 141, 255)
rectangle3 = Rectangle(100, 90, 175, 30, 245, 241, 11)
rectangle2 = Rectangle(125, 120, 125, 30, 21,209, 125) 
rectangle1 = Rectangle(150, 150, 75, 30, 223,209, 125)



pile1 = [rectangle5, rectangle4, rectangle3, rectangle2, rectangle1]
pile2 = []
pile3 = []


select = False
p_select = None
old_b = None
jeu = True


@window.event
def on_mouse_press(x, y, button, modifiers):
    global select, p_select, old_b, jeu
    
    if not select:
        select = True
        try:
            p_select, old_b = rectangle_select(x, y)
        except TypeError:
            pass

    elif select:
        while select:
            try:
                b_select, new_p = base_select(x,y)
                if new_p and p_select[-1].x > new_p[-1].x:
                    pass         
                elif not b_select :
                    pass
                elif p_select == new_p :
                    pass
                elif p_select == None:
                    pass
                else :    
                    p_select[-1].new_pos(b_select.x_pos + (p_select[-1].x_pos-old_b.x_pos), b_select.y + len(new_p)*30)
                    new_p.append(p_select[-1])
                    p_select.pop(-1)        
            except TypeError:
                pass

            p_select = None
            select = False
            if victoire(pile2, pile3):
                jeu = False
            else :
                pass
   





@window.event
def on_draw():
    window.clear()
    batch.draw()
    if not jeu:
        label.draw()
pyglet.app.run()
